{"version":3,"file":"sdk.gen.js","sourceRoot":"","sources":["../../../../lib/api/sdk.gen.ts"],"names":[],"mappings":"AAAA,qDAAqD;AAIrD,OAAO,EAAE,MAAM,IAAI,aAAa,EAAE,MAAM,cAAc,CAAC;AAgBvD,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAuC,OAA0D,EAAE,EAAE;;IACtI,OAAO,CAAC,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,mCAAI,aAAa,CAAC,CAAC,GAAG,iBACzC,GAAG,EAAE,sBAAsB,IACxB,OAAO,EACZ,CAAC;AACP,CAAC,CAAC","sourcesContent":["// This file is auto-generated by @hey-api/openapi-ts\n\nimport type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';\nimport type { GetApiWeatherforecastData, GetApiWeatherforecastResponse } from './types.gen';\nimport { client as _heyApiClient } from './client.gen';\n\nexport type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {\n    /**\n     * You can provide a client instance returned by `createClient()` instead of\n     * individual options. This might be also useful if you want to implement a\n     * custom client.\n     */\n    client?: Client;\n    /**\n     * You can pass arbitrary values through the `meta` object. This can be\n     * used to access values that aren't defined as part of the SDK function.\n     */\n    meta?: Record<string, unknown>;\n};\n\nexport const getApiWeatherforecast = <ThrowOnError extends boolean = false>(options?: Options<GetApiWeatherforecastData, ThrowOnError>) => {\n    return (options?.client ?? _heyApiClient).get<GetApiWeatherforecastResponse, unknown, ThrowOnError>({\n        url: '/api/weatherforecast',\n        ...options\n    });\n};"]}