{"version":3,"file":"FetchData.js","sourceRoot":"","sources":["../../../../Pages/Features/FetchData.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAE,qBAAqB,EAAE,MAAM,SAAS,CAAC;AAUzC,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,UAAU;IAArC;;QACsB,cAAS,GAAuB,EAAE,CAAC;IAwBhE,CAAC;IAtBa,MAAM;QACZ,OAAO,IAAI,CAAA;;;;;;;;;;sBAUG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAA;;4FAEmC,QAAQ,CAAC,IAAI;4FACb,QAAQ,CAAC,YAAY;4FACrB,QAAQ,CAAC,OAAO;;qBAEvF,CAAC;;;SAGb,CAAC;IACN,CAAC;CACJ,CAAA;AAxB4B;IAAxB,QAAQ,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC;+CAAoC;AADnD,YAAY;IADxB,aAAa,CAAC,eAAe,CAAC;GAClB,YAAY,CAyBxB;;AAGM,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,UAAU;IAAlC;;QACuB,UAAK,GAAU,EAAE,SAAS,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;IAmD5F,CAAC;IAjDG,KAAK,CAAC,iBAAiB;QACnB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QACvB,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAES,MAAM;QACZ,OAAO,IAAI,CAAA;;;;;;;;;;;0CAWuB,IAAI,CAAC,KAAK,CAAC,OAAO;YACpB,CAAC;gBACG,IAAI,CAAA,qDAAqD;YAC7D,CAAC;gBACG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACd,IAAI,CAAA,qFAAqF,CAAC,CAAC;oBAC3F,IAAI,CAAA,6BAA6B,IAAI,CAAC,KAAK,CAAC,SAAS,mBAC7D;;;;;;;;SAQ/B,CAAC;IACN,CAAC;IACO,KAAK,CAAC,SAAS;QACnB,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QAEzB,IAAI,CAAC;YACD,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,qBAAqB,EAAE,CAAC;QACzD,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACT,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;YACxB,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,CAAC,CAAC,CAAC;QACrD,CAAC;gBAAS,CAAC;YACP,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;QAC/B,CAAC;IACL,CAAC;CACJ,CAAA;AAnD6B;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;wCAA+D;AAD/E,SAAS;IADrB,aAAa,CAAC,cAAc,CAAC;GACjB,SAAS,CAoDrB","sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { getApiWeatherforecast } from 'api/sdk';\nimport { WeatherForecast } from 'api/types';\n\ntype props = {\n    forecasts: Array<WeatherForecast>;\n    loading: boolean;\n    error: boolean;\n}\n\n@customElement('forecast-list')\nexport class ForecastList extends LitElement {\n    @property({type: Array}) forecasts: props['forecasts'] = [];\n\n    protected render() {\n        return html`\n            <table class=\"min-w-full divide-y divide-gray-200\">\n                <thead class=\"bg-gray-50\">\n                    <tr>\n                        <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Date</th>\n                        <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Temp. (C)</th>\n                        <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Summary</th>\n                    </tr>\n                </thead>\n                <tbody class=\"bg-white divide-y divide-gray-200\">\n                    ${this.forecasts.map(forecast => html`\n                        <tr>\n                            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">${forecast.date}</td>\n                            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">${forecast.temperatureC}</td>\n                            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">${forecast.summary}</td>\n                        </tr>\n                    `)}\n                </tbody>\n            </table>\n        `;\n    }\n}\n\n@customElement('my-fetchdata')\nexport class FetchData extends LitElement {\n    @property({type: Object}) props: props = { forecasts: [], loading: true, error: false };\n    \n    async connectedCallback() {\n        super.connectedCallback();\n        await this.fetchData();\n        this.requestUpdate();\n    }\n    \n    protected render() {\n        return html`\n            <div class=\"min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12\">\n                <div class=\"relative py-3 sm:max-w-xl sm:mx-auto\">\n                    <div class=\"relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20\">\n                        <div class=\"max-w-md mx-auto\">\n                            <div class=\"divide-y divide-gray-200\">\n                                <div class=\"py-8 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7\">\n                                    <h1 class=\"text-3xl font-bold text-gray-900 mb-4\">Weather Forecast</h1>\n                                    <p class=\"text-gray-600\">This component demonstrates fetching data from an API.</p>\n                                    \n                                    <div class=\"mt-6\">\n                                        ${this.props.loading \n                                        ? \n                                            html`<p class=\"text-center text-gray-500\">Loading...</p>` \n                                        : \n                                            this.props.error ? \n                                                html`<p class=\"text-center text-red-500\">Error loading data. Please try again later.</p>` :\n                                                html`<forecast-list .forecasts=${this.props.forecasts}></forecast-list>`\n                                        }\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n    private async fetchData() {\n        this.props.loading = true;\n        this.props.error = false;\n        \n        try {\n            await new Promise(resolve => setTimeout(resolve, 300));\n            this.props.forecasts = await getApiWeatherforecast();\n        } catch (e) {\n            this.props.error = true;\n            console.error('Error fetching weather data:', e);\n        } finally {\n            this.props.loading = false;\n        }\n    }\n}"]}